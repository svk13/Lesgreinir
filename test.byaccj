%{
import java.lang.Math;
import java.io.*;
import java.util.StringTokenizer;
//import is.hi.compilers.NanoLexer;
%}

/* YACC Declarations */
%token NUM
%left '-' '+'
%left '*' '/'
%left NEG /* negation--unary minus */
%right '^' /* exponentiation */

/* Grammar follows */
%%
input: /* empty string */
 | input line
 ;

line: '\n'
 | exp '\n' { System.out.println(" " + $1.dval + " "); }
 ;

exp: NUM { $$ = $1; }
 | exp '+' exp { $$ = new testVal($1.dval + $3.dval); }
 | exp '-' exp { $$ = new testVal($1.dval - $3.dval); }
 | exp '*' exp { $$ = new testVal($1.dval * $3.dval); }
 | exp '/' exp { $$ = new testVal($1.dval / $3.dval); }
 | '-' exp %prec NEG { $$ = new testVal(-$2.dval); }
 | exp '^' exp { $$ = new testVal(Math.pow($1.dval, $3.dval)); }
 | '(' exp ')' { $$ = $2; }
 ;
%%

String ins;
StringTokenizer st;
public static NanoLexer in;
public final static int ERROR = -1;
public final static int OPNAME = 1001;
public final static int NAME = 1002;
public final static int LITERAL = 1003;
public final static int FUNCTION = 1004;
public final static int WHILE = 1005;
public final static int IF = 1006;
public final static int ELSE = 1007;
public final static int ELSEIF = 1008;
public final static int RETURN = 1009;
public final static int VAR = 1010;
public static int tok;

  	  

void yyerror(String s)
{
 //System.out.println("par:"+s);
}


boolean newline;
int yylex()
{
String s;
int tok;
Double d;
 //System.out.print("yylex ");
 if (!st.hasMoreTokens())
 if (!newline)
 {
 newline=true;
 return '\n'; //So we look like classic YACC example
 }
 else
 return 0;
 s = st.nextToken();
 ////System.out.println("tok:"+s);
 try
 {
 d = Double.valueOf(s);/*this may fail*/
 yylval = new testVal(d.doubleValue()); //SEE BELOW
 tok = NUM;
 }
 catch (Exception e)
 {
 tok = s.charAt(0);/*if not float, return char*/
 }
 return tok;
}

String token;
public String myType(int num){
			switch(num)
		{	
			case FUNCTION:  
				token = "FUNCTION";
				return token;
			case LITERAL:  
				token = "LITERAL";
				return token;
			case NAME:  
				token = "NAME";
			//	isName();
				return token;
			case VAR:
				token = "VAR";
			//	isVAR();
				return token;
			case 40:
				token = "(";
				return token;
			case 41:
				token = ")";
				return token;
			case 123: 
				token = "{";
				return token;
			case 125:
				token = "}";
				return token;
			case 59:
				token = ";";
				return token;
			case 44:
				token = ",";
				return token;
			case OPNAME:
				token = "OPNAME";
				return token;
			case ERROR:
				token = "ERROR";
				return token;
			case WHILE:
				token = "WHILE";
				return token;
			case IF:
				token = "IF";
				return token;
			case ELSE:
				token = "ELSE";
				return token;
			case ELSEIF:
				token = "ELSEIF";
				return token;
			case RETURN:
				token = "RETURN";
				return token;
			default: throw new Error(token);
		}
	
}

public NanoLexer getLexer( Reader r ) throws FileNotFoundException
{
		return new NanoLexer(r);
}

void dotest(String args[])
{
 in = null;
try {
 in = getLexer(new FileReader(args[0]));
	}catch (Exception e){
		//System.out.println("Villa í getLexer(): "+e);
	}
 int retCode=1;
 //System.out.println("BYACC/J Parser fyrir Þýðendur");

 try
 {
 retCode = in.yylex();
 match(retCode,FUNCTION);
 //System.out.println("tok er: " + tok);
 tok=-1;
 program();
//myType(retCode);

 
 }
 catch (Exception e)
 {
	System.out.println("Villa í að lesa skrá"+e);
 }

 //st = new StringTokenizer(ins);
 newline=false;
 //yyparse();

}

public void program(){
	while(tok!=0){
		function();
		tok = getToken(in);
	}
	System.out.println("PROGRAM ER BUID :) :) ");
	
}


public void function(){
	
	//nafnið:
	tok = getToken(in);
	match(tok,NAME);
	//svigi
	tok = getToken(in);
	match(tok,40);

	tok = getToken(in);
	
	if(tok!=41){
		//Ef ekki svigi þá NAME
		match(tok,NAME);
		tok = getToken(in);
		while(tok!=41){
			match(tok,44);
			tok=getToken(in);
			match(tok,NAME);
			tok=getToken(in);
		}
	}
	match(tok,41);
	//'{', { decl, ';' }, { expr, ';' }, '}'
	tok=getToken(in);
	match(tok,123);
	tok=getToken(in);
	checkForDecl();
	
	
	//expr
    while(tok != 125){
        checkForExpr();
		tok=getToken(in);
    }
	
}

public void checkForDecl(){
	while(tok == VAR){
            tok=getToken(in);
            match(tok,NAME);
			tok=getToken(in);
            while(tok != 59){
                match(tok,44);
				tok=getToken(in);
				match(tok,NAME);
				tok=getToken(in);
            }
            match(tok,59); // ;
			tok=getToken(in);
        }
}

public void checkForExpr(){
	switch(tok){
		case 61:
			tok = getToken(in);
			checkForExpr();
			break;
		
		case RETURN:
			tok = getToken(in);
			checkForExpr();
			break;
		
		case NAME: 
			tok = getToken(in);
            if(tok==40){
                tok = getToken(in);
                checkForExpr();
                //tok = getToken(in);
                match(tok, 41);
            } else if(tok==41){
				break;
			} else if(match(tok,61,true)){
				tok = getToken(in);
				checkForExpr();
				break;
			}	else if(tok==44){
                tok = getToken(in);
                checkForExpr();
                break;
            } else {
				checkForBinExpr(tok);
				break;
			}
	
		default:
			checkForBinExpr(tok);
			break;
			
	}
}

public void checkForBinExpr(int source){
	checkForSmallExpr(tok);
	//tok = getToken(in);
	while(tok==OPNAME){
		checkForSmallExpr(tok);
		//tok = getToken(in);
	}
}

public void checkForSmallExpr(int source){
	switch(tok){
		case NAME:
			tok = getToken(in);
			if(tok==40){
				tok = getToken(in);
				checkForExpr();
				tok = getToken(in);
				while(tok==44){
					checkForExpr();
					tok = getToken(in);
				}
				match(tok,41);
			}else{
				break;
			}
		case OPNAME:
			tok = getToken(in);
			checkForSmallExpr(tok);
			break;
		case LITERAL:
			tok = getToken(in);
			break;
		case 40:
			tok = getToken(in);
			checkForExpr();
			//tok = getToken(in);
			match(tok,41);
			break;
		case IF:
			tok = getToken(in);
			match(tok,40);// (
			
			tok = getToken(in);
			checkForExpr();
			match(tok,41);
			tok = getToken(in);
			checkForBody();
			tok = getToken(in);
			while(match(tok,ELSEIF,true)){
				tok = getToken(in);
				tok = getToken(in);
				checkForExpr();
				tok = getToken(in);
				checkForBody();
				tok = getToken(in);
			}
			if(match(tok,ELSE,true)){
				checkForExpr();
				tok = getToken(in);
				checkForBody();
			
				
				//tok = getToken(in);
			}
			break;
		case WHILE:
            tok = getToken(in);
			match(tok,40);
			tok=getToken(in);
			checkForExpr();
			tok = getToken(in);
			checkForBody();
			break;
    }

}

public void checkForBody(){
	match(tok,123);
	tok = getToken(in);
	while(tok!=125){
		checkForExpr();
		if(tok == 40 || tok == 41){
			tok = getToken(in);
		}
		match(tok,59);
		tok = getToken(in);
	}
	
	match(tok,125);
	//getAndMatch(125);
}
public void getAndMatch(int tokenz){
	//System.out.println("getAndMatch");
	tok = getToken(in);
	match(tok,tokenz);
}

public int getToken(NanoLexer li){
	try{
		int tmp = li.yylex();
		if(tmp == 0){
			System.out.println("END OF FILE");
		}else{
			System.out.println(tmp+": "+li.lexeme);	
		}


		return tmp;
	}catch (Exception e ){
		System.out.println("gat ekki lesið " + e  );
		return -1;
	}
}

public void over(int matchme) throws Exception {
        if(tok==matchme){

            if(tok==0) {
                return;
            }else{
                tok = getToken(in);
            }
        }
        else{
            throw new Error("Unexpected token. Expected '"+matchme+"' but got '"+tok+"'.");
        }

    }

public void match(int input, int lookup) {
	Boolean tmp = match(input, lookup, false);
}

public boolean match(int input, int lookup, boolean optional) {
	if(optional){
		return input == lookup;
	}
	if(input != lookup){
		throw new Error(input+" does not match "+lookup+". The word is: "+in.lexeme);
	}
	return false;
}

public static void main(String args[])
{
 test par = new test(false);
 par.dotest(args);
}