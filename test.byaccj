%{
import java.lang.Math;
import java.io.*;
import java.util.StringTokenizer;
//import is.hi.compilers.NanoLexer;
%}

/* YACC Declarations */
%token NUM
%left '-' '+'
%left '*' '/'
%left NEG /* negation--unary minus */
%right '^' /* exponentiation */

/* Grammar follows */
%%
input: /* empty string */
 | input line
 ;

line: '\n'
 | exp '\n' { System.out.println(" " + $1.dval + " "); }
 ;

exp: NUM { $$ = $1; }
 | exp '+' exp { $$ = new testVal($1.dval + $3.dval); }
 | exp '-' exp { $$ = new testVal($1.dval - $3.dval); }
 | exp '*' exp { $$ = new testVal($1.dval * $3.dval); }
 | exp '/' exp { $$ = new testVal($1.dval / $3.dval); }
 | '-' exp %prec NEG { $$ = new testVal(-$2.dval); }
 | exp '^' exp { $$ = new testVal(Math.pow($1.dval, $3.dval)); }
 | '(' exp ')' { $$ = $2; }
 ;
%%

String ins;
StringTokenizer st;
public static NanoLexer in;
public final static int ERROR = -1;
public final static int OPNAME = 1001;
public final static int NAME = 1002;
public final static int LITERAL = 1003;
public final static int PROGRAM = 1004;
public final static int WHILE = 1005;
public final static int IF = 1006;
public final static int ELSE = 1007;
public final static int ELSEIF = 1008;
public final static int RETURN = 1009;
public final static int VAR = 1010;
public static int tok;

  	  

void yyerror(String s)
{
 System.out.println("par:"+s);
}


boolean newline;
int yylex()
{
String s;
int tok;
Double d;
 //System.out.print("yylex ");
 if (!st.hasMoreTokens())
 if (!newline)
 {
 newline=true;
 return '\n'; //So we look like classic YACC example
 }
 else
 return 0;
 s = st.nextToken();
 //System.out.println("tok:"+s);
 try
 {
 d = Double.valueOf(s);/*this may fail*/
 yylval = new testVal(d.doubleValue()); //SEE BELOW
 tok = NUM;
 }
 catch (Exception e)
 {
 tok = s.charAt(0);/*if not float, return char*/
 }
 return tok;
}

String token;
public void myType(int num){
			switch(num)
		{	
			case PROGRAM:  
				token = "PROGRAM";
				break;
			case LITERAL:  
				token = "LITERAL";
				break;
			case NAME:  
				token = "NAME";
				isName();
				break;
			case VAR:
				token = "VAR";
				isVAR();
				break;
			case 40:
				token = "(";
				break;
			case 41:
				token = ")";
				break;
			case 123: 
				token = "{";
				break;
			case 125:
				token = "}";
				break;
			case 59:
				token = ";";
				break;
			case 44:
				token = ",";
				break;
			case OPNAME:
				token = "OPNAME";
				break;
			case ERROR:
				token = "ERROR";
				break;
			case WHILE:
				token = "WHILE";
				break;
			case IF:
				token = "IF";
				break;
			case ELSE:
				token = "ELSE";
				break;
			case ELSEIF:
				token = "ELSEIF";
				break;
			case RETURN:
				token = "RETURN";
				break;
			default: throw new Error(token);
		}
	/*if( num == -1){
		return "ERROR";
	}
	else if( num == 1001){
		return "IF";
	}else if( num == 1002){
		return "VAR";
	}else if( num == 1003){
		return "NAME";
	}else if( num == 1004){
		return "LITERAL";
	}else if( num == 1005){
		return "OPNAME";
	}else if( num == 1007){
		return "LOOP";
	}else if( num == 1008){
		return "RETURN";
	}else if( num == 1009){
		return "ELSEIF";
	}else if( num == 1010){
		return "ELSE";
	}else{
		return "bull";
	}*/
}

public NanoLexer getLexer( Reader r ) throws FileNotFoundException
{
		return new NanoLexer(r);
}

void dotest(String args[])
{
 in = null;
try {
 in = getLexer(new FileReader(args[0]));
	}catch (Exception e){
		System.out.println("Villa í getLexer(): "+e);
	}
 int retCode=1;
 System.out.println("BYACC/J Parser fyrir Þýðendur");
 while (true)
 {
 try
 {
 retCode = in.yylex();
 if(retCode == 0){
	break;
 }
 System.out.println(retCode + " "+ in.lexeme);
myType(retCode);

 
 }
 catch (Exception e)
 {
	System.out.println("Villa í að lesa skrá"+e);
 }
 //st = new StringTokenizer(ins);
 newline=false;
 //yyparse();
 }
}
public void isVAR(){
	NanoLexer tmp = in;
	tok = getToken(tmp);
	match(tok,NAME);
	
	tok = getToken(tmp);
	
	while(tok==44){
			tok = getToken(tmp);
			match(tok,NAME);
			tok = getToken(tmp);
			
	}
	
}

public void isName(){
	tok = getToken(in);
	if(match(tok,40,true)){
		tok = getToken(in);
		if(tok!=41){
			match(tok,NAME);		
			tok = getToken(in);
			while(tok==44){
					tok = getToken(in);
					match(tok,NAME);
					tok = getToken(in);
					
			}
		}
		match(tok,41);
		tok = getToken(in);
		match(tok,123);
		tok = getToken(in);
		return;
	}
	/*while(match(tok,VAR,true)){
		isVAR();
		match(tok,59);
		tok = getToken(in);
	}*/
	while(!match(tok,125,true)){
		checkForExpr();
		tok = getToken(in);
	}
	tok = getToken(in);
	match(tok,125);
}

public void checkForExpr(){
	if(match(tok,61,true)){
		tok = getToken(in);
		checkForExpr();
		
	} else if(match(tok,RETURN,true)){
		tok = getToken(in);
		checkForExpr();
	} else if(match(tok,NAME,true)){
		tok = getToken(in);
		//if(!in.lexeme.equals("=")){ //Lesgreinir túlkar "=" sem NAME
		if(match(tok,61,true)){
			tok = getToken(in);
			checkForExpr();
		
			//}
		} else {
			checkForBinExpr(NAME);
		}
	} else {
		checkForBinExpr(0);
	}
	match(tok,59,true); //Þessi lína er eitthvað að valda veseni án true (á að koma villa ef ekki ;, en heldur of snemma að það eigi að koma semikomma
}

public void checkForBinExpr(int source){
	checkForSmallExpr(source);
	tok = getToken(in);
	while(match(tok,OPNAME,true)){
		checkForSmallExpr(0);
		tok = getToken(in);
	}
}

public void checkForSmallExpr(int source){
	if(source == NAME || match(tok, NAME, true)){
		if(source != NAME){
			tok = getToken(in);
		}
		if(!match(tok, 40, true)){ //líklegast semikomma, er athugað þegar komið er úr fallinu
			return;
		}
		tok = getToken(in);
		checkForExpr();
		tok = getToken(in);
		while(tok==44){
			checkForExpr();
			tok = getToken(in);
		}
		match(tok,41);
	} else if(match(tok,OPNAME,true)){
		tok = getToken(in);
		checkForSmallExpr(0);
	} else if(match(tok,LITERAL,true)){
		return;
	} else if(match(tok, 40, true)){
		tok = getToken(in);
		checkForExpr();
		tok = getToken(in);
		match(tok,41);
	} else if(match(tok, IF, true)){
		tok = getToken(in);
		checkForExpr();
		tok = getToken(in);
		checkForBody();
		tok = getToken(in);
		match(tok,123);
		tok = getToken(in);
		while(match(tok,ELSEIF,true)){
			tok = getToken(in);
			checkForExpr();
			tok = getToken(in);
			checkForBody();
			tok = getToken(in);
		}
		if(match(tok,ELSE,true)){
			checkForExpr();
			tok = getToken(in);
			checkForBody();
			tok = getToken(in);
		}
	} else if(match(tok,WHILE,true)){
		tok = getToken(in);
		checkForExpr();
		tok = getToken(in);
		checkForBody();
	}
	return;	
}

public void checkForBody(){
	match(tok,123);
	tok = getToken(in);
	checkForExpr();
	tok = getToken(in);
	match(tok,125);
}

public int getToken(NanoLexer li){
	try{
		int tmp = li.yylex();
		System.out.println(tmp+": "+li.lexeme);
		
		return tmp;
	}catch (Exception e ){
		System.out.println("gat ekki lesið " + e  );
		return -1;
	}
}

public void match(int input, int lookup) {
	Boolean tmp = match(input, lookup, false);
}

public boolean match(int input, int lookup, boolean optional) {
	if(optional){
		return input == lookup;
	}
	if(input != lookup){
		throw new Error(input+" does not match "+lookup+". The word is: "+in.lexeme);
	}
	return false;
}

public static void main(String args[])
{
 test par = new test(false);
 par.dotest(args);
}